name: Issue Assignment & Tracking

on:
  schedule:
    - cron: "*/1 * * * *"  # Runs every minute

permissions:
  issues: write

jobs:
  check-deadlines:
    runs-on: ubuntu-latest
    steps:
      - name: Check Issue Deadlines
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            const now = new Date();
            console.log(`Current time: ${now}`);

            for (const issue of issues) {
              if (!issue.assignees.length) continue;

              const createdAt = new Date(issue.created_at);
              const labels = issue.labels.map(l => l.name);

              let deadlineMinutes = 3; // Max deadline
              const deadline = new Date(createdAt.getTime() + deadlineMinutes * 60000);

              const timeLeft = Math.floor((deadline - now) / 60000); // Minutes remaining

              console.log(`Issue #${issue.number} | Created: ${createdAt} | Deadline: ${deadline} | Time left: ${timeLeft} min`);

              // üîπ 1 Minute Left Reminder
              if (timeLeft === 1) {
                console.log(`‚ö†Ô∏è Sending reminder for Issue #${issue.number}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `@${issue.assignees.map(a => a.login).join(", ")} Your deadline is in 1 minute. Please update your progress.`
                });
              }

              // üîπ 1 Minute Over ‚Üí Add "priority: low" Label
              if (timeLeft === 2 && !labels.includes("priority: low")) {
                console.log(`üîπ Adding "priority: low" label to Issue #${issue.number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ["priority: low"]
                });
              }

              // üîπ 2 Minutes Over ‚Üí Add "priority: medium" Label
              if (timeLeft === 1 && !labels.includes("priority: medium")) {
                console.log(`üîπ Adding "priority: medium" label to Issue #${issue.number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ["priority: medium"]
                });
              }

              // üîπ 3 Minutes Over ‚Üí Remove Assignee & Add "up-for-grabs"
              if (timeLeft <= 0) {
                console.log(`‚ùå Deadline exceeded for Issue #${issue.number} | Unassigning...`);

                try {
                  await github.rest.issues.removeAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    assignees: issue.assignees.map(a => a.login),
                  });
                  console.log(`‚úÖ Assignees removed for Issue #${issue.number}`);
                } catch (error) {
                  console.error(`‚ö†Ô∏è Failed to remove assignees: ${error.message}`);
                }

                // Remove "Status: Assigned" label
                if (labels.includes("Status: Assigned")) {
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      name: "Status: Assigned"
                    });
                    console.log(`‚úÖ Removed "Status: Assigned" label`);
                  } catch (error) {
                    console.error(`‚ö†Ô∏è Failed to remove "Status: Assigned" label: ${error.message}`);
                  }
                }

                // Add "up-for-grabs" label
                if (!labels.includes("up-for-grabs")) {
                  try {
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      labels: ["up-for-grabs"]
                    });
                    console.log(`‚úÖ Added "up-for-grabs" label`);
                  } catch (error) {
                    console.error(`‚ö†Ô∏è Failed to add "up-for-grabs" label: ${error.message}`);
                  }
                }

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: "This issue has been unassigned due to inactivity. It is now available for others to take."
                });
              }
            }
