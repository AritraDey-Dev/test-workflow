name: Issue Assignment & Tracking

on:
  issues:
    types: [opened, edited, reopened, labeled, unlabeled]
  issue_comment:
    types: [created]
  schedule:
    - cron: "*/1 * * * *"  # Runs every minute

permissions:
  issues: write

jobs:
  check-deadlines:
    runs-on: ubuntu-latest
    steps:
      - name: Check Issue Deadlines
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            const now = new Date();
            for (const issue of issues) {
              if (!issue.assignees.length) continue;

              const createdAt = new Date(issue.created_at);
              let deadlineMinutes = 0;

              if (issue.labels.some(l => l.name === "priority: high")) deadlineMinutes = 1;
              if (issue.labels.some(l => l.name === "priority: medium")) deadlineMinutes = 2;
              if (issue.labels.some(l => l.name === "priority: low")) deadlineMinutes = 3;

              if (!deadlineMinutes) continue;

              const deadline = new Date(createdAt.getTime() + deadlineMinutes * 60000);
              const reminderTime = new Date(deadline.getTime() - 60000);

              console.log(`Checking issue #${issue.number}: Deadline at ${deadline}, Reminder at ${reminderTime}`);

              // Send reminder 1 min before deadline
              if (now >= reminderTime && now < deadline) {
                console.log(`Sending reminder for issue #${issue.number}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `@${issue.assignees.map(a => a.login).join(", ")} Your deadline is in 1 minute. Please update your progress.`
                });
              }

              // If deadline exceeded, unassign and mark as up-for-grabs
              if (now >= deadline) {
                console.log(`Unassigning issue #${issue.number} due to deadline exceed`);

                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: issue.assignees.map(a => a.login),
                });

                const labels = issue.labels.map(l => l.name);

                // Remove "Status: Assigned" if it exists
                if (labels.includes("Status: Assigned")) {
                  console.log(`Removing "Status: Assigned" label for issue #${issue.number}`);
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: "Status: Assigned"
                  }).catch(() => {});
                }

                // Ensure "up-for-grabs" is added only if not already there
                if (!labels.includes("up-for-grabs")) {
                  console.log(`Adding "up-for-grabs" label for issue #${issue.number}`);
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ["up-for-grabs"]
                  });
                }

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: "This issue has been unassigned due to inactivity. It is now available for others to take."
                });
              }
            }
