name: Issue Assignment & Tracking

on:
  schedule:
    - cron: "*/1 * * * *"  # Runs every minute

permissions:
  issues: write

jobs:
  check-deadlines:
    runs-on: ubuntu-latest
    steps:
      - name: Check Issue Deadlines
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            const now = new Date();
            console.log(`Current time: ${now}`);

            for (const issue of issues) {
              if (!issue.assignees.length) continue;

              const createdAt = new Date(issue.created_at);
              const labels = issue.labels.map(l => l.name);

              let deadlineMinutes = 3; // Testing with 3 minutes
              const deadline = new Date(createdAt.getTime() + deadlineMinutes * 60000);
              const timeLeft = Math.floor((deadline - now) / 60000); // Minutes remaining

              console.log(`Issue #${issue.number} | Created: ${createdAt} | Deadline: ${deadline} | Time left: ${timeLeft} min`);

              // Add labels based on time left
              if (timeLeft === 1 && !labels.includes("priority: high")) {
                console.log(`🔹 Adding "priority: high" label to Issue #${issue.number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ["priority: high"]
                });
              }

              if (timeLeft === 2 && !labels.includes("priority: medium")) {
                console.log(`🔹 Adding "priority: medium" label to Issue #${issue.number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ["priority: medium"]
                });
              }

              if (timeLeft === 3 && !labels.includes("priority: low")) {
                console.log(`🔹 Adding "priority: low" label to Issue #${issue.number}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ["priority: low"]
                });
              }

              // Send a warning when 1 minute is left
              if (timeLeft === 1) {
                console.log(`⚠️ Sending reminder for Issue #${issue.number}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `@${issue.assignees.map(a => a.login).join(", ")} Your deadline is in 1 minute. Please update your progress.`
                });
              }

              // If the deadline has passed, unassign the issue and reset labels
              if (timeLeft <= 0) {
                console.log(`❌ Deadline exceeded for Issue #${issue.number} | Unassigning...`);

                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: issue.assignees.map(a => a.login),
                }).catch(() => console.log("No assignees to remove"));

                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: "Status: Assigned"
                }).catch(() => console.log("Label not found"));

                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ["up-for-grabs"]
                });

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: "This issue has been unassigned due to inactivity. It is now available for others to take."
                });
              }
            }
